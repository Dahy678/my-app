version: 2.1

jobs:
  # Job para instalar dependencias y ejecutar SonarQube (SAST)
  build:
    docker:
      - image: circleci/python:3.8  # O la imagen que más se ajuste a tu proyecto
    steps:
      - checkout  # Extrae el código del repositorio
      - run:
          name: Instalar SonarScanner
          command: |
            curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
            unzip sonar-scanner.zip
            sudo mv sonar-scanner-4.6.2.2472-linux /opt/sonar-scanner
            echo 'export PATH=$PATH:/opt/sonar-scanner/bin' | sudo tee -a ~/.bashrc
            source ~/.bashrc
      - run:
          name: Ejecutar SonarScanner para análisis SAST
          command: |
            sonar-scanner \
              -Dsonar.projectKey=mi_proyecto \
              -Dsonar.host.url=http://localhost:9000 \
              -Dsonar.login=$SONAR_TOKEN

  # Job para ejecutar OWASP ZAP (DAST) y hacer análisis de seguridad en ejecución
  zap_scan:
    docker:
      - image: owasp/zap2docker-stable  # Imagen oficial de OWASP ZAP
    steps:
      - checkout  # Extrae el código del repositorio
      - run:
          name: Ejecutar escaneo de seguridad con OWASP ZAP
          command: |
            zap-full-scan.py -t http://localhost:8080  # URL de tu aplicación en ejecución
            # O usar ZAP Docker para escanear directamente un contenedor si es necesario

  # Job de implementación (opcional)
  deploy:
    docker:
      - image: circleci/python:3.8  # O la imagen que necesites para tu implementación
    steps:
      - checkout
      - run:
          name: Desplegar aplicación
          command: |
            echo "Desplegar la aplicación..."

# Workflow: organiza los jobs
workflows:
  version: 2
  security_scan:
    jobs:
      - build
      - zap_scan:
          requires:
            - build
      - deploy:
          requires:
            - zap_scan
